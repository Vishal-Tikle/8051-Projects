C51 COMPILER V9.60.7.0   MAIN_FILE                                                         01/16/2023 01:18:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN_FILE
OBJECT MODULE PLACED IN .\Objects\Main File.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Main File.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\Main File.lst) TABS(2) OBJECT(.\Objects\Main File.obj)

line level    source

   1          #include<reg52.h>
   2          sbit CLK=P2^1;
   3          sbit DIN=P2^2;
   4          sbit DC=P2^3;
   5          sbit CE=P2^4;
   6          sbit RST=P2^5;
   7          
   8          void Send(unsigned char);
   9          void Data(unsigned char);
  10          void Cmd(unsigned char);
  11          void setPixel(unsigned char, unsigned char);
  12          void setCursor(unsigned char, unsigned char);
  13          void allClear(void);
  14          void Initialize_LCD(void);
  15          void charDisp(unsigned char);
  16          void stringDisp(unsigned char*);
  17          
  18          unsigned char code  Graphics [] = {
  19          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xcf, 0x8f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f
             -, 0x1f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xef, 0xcf
             -, 0xcf, 0xcf, 0x8f, 0x8f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x8f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xfe, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x01, 0x03, 0x07, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0
             -, 0xc0, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
             -, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  20          };
  21          
  22          const unsigned char code LookUpTable [][5] =
  23          {
  24          { 0x00, 0x00, 0x00, 0x00, 0x00 },  // space
  25          { 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
  26          { 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
  27          { 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
  28          { 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
  29          { 0xc4, 0xc8, 0x10, 0x26, 0x46 },   // %
C51 COMPILER V9.60.7.0   MAIN_FILE                                                         01/16/2023 01:18:54 PAGE 2   

  30          { 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
  31          { 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
  32          { 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
  33          { 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
  34          { 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
  35          { 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
  36          { 0x00, 0x00, 0x50, 0x30, 0x00 },   // ,
  37          { 0x10, 0x10, 0x10, 0x10, 0x10 },   // -
  38          { 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
  39          { 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
  40          { 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
  41          { 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
  42          { 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
  43          { 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
  44          { 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
  45          { 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
  46          { 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
  47          { 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
  48          { 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
  49          { 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
  50          { 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
  51          { 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
  52          { 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
  53          { 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
  54          { 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
  55          { 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
  56          { 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
  57          { 0x7E, 0x11, 0x11, 0x11, 0x7E },   // A
  58          { 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
  59          { 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
  60          { 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
  61          { 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
  62          { 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
  63          { 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
  64          { 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
  65          { 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
  66          { 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
  67          { 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
  68          { 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
  69          { 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
  70          { 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
  71          { 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
  72          { 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
  73          { 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
  74          { 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
  75          { 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
  76          { 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
  77          { 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
  78          { 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
  79          { 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
  80          { 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
  81          { 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
  82          { 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
  83          { 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
  84          { 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
  85          { 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
  86          { 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
  87          { 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
  88          { 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
  89          { 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
  90          { 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
  91          { 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
C51 COMPILER V9.60.7.0   MAIN_FILE                                                         01/16/2023 01:18:54 PAGE 3   

  92          { 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
  93          { 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
  94          { 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
  95          { 0x0C, 0x52, 0x52, 0x52, 0x3E },   // g
  96          { 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
  97          { 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
  98          { 0x20, 0x40, 0x44, 0x3D, 0x00 },   // j
  99          { 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
 100          { 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
 101          { 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
 102          { 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
 103          { 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
 104          { 0x7C, 0x14, 0x14, 0x14, 0x08 },   // p
 105          { 0x08, 0x14, 0x14, 0x18, 0x7C },   // q
 106          { 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
 107          { 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
 108          { 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
 109          { 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
 110          { 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
 111          { 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
 112          { 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
 113          { 0x0C, 0x50, 0x50, 0x50, 0x3C },   // y
 114          { 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
 115          { 0x00, 0x08, 0x3e, 0x41, 0x00 }    // {
 116          };
 117          
 118          void Send(unsigned char a){
 119   1      unsigned char i;
 120   1      for(i=0;i<8;i++){
 121   2      CLK = 0;
 122   2      if((a&0x80)){
 123   3      DIN = 1;
 124   3      } else {
 125   3      DIN = 0;
 126   3      }
 127   2      CLK = 1;
 128   2      a <<= 1;
 129   2      }
 130   1      }
 131          
 132          void Data(unsigned char x){
 133   1      DC = 1;
 134   1      CE = 0;
 135   1      Send(x);
 136   1      CE = 1;
 137   1      }
 138          
 139          void Cmd(unsigned char x){
 140   1      DC = 0;
 141   1      CE = 0;
 142   1      Send(x);
 143   1      CE = 1;
 144   1      }
 145          
 146          /* Brings ram pointer to X,Y pixel position            */
 147          /* Input Arguments: x-> X cordinate range from 0 to 83 */
 148          /* Input Arguments: y-> Y cordinate range from 0 to 5  */
 149          
 150          void setPixel(unsigned char x, unsigned char y)
 151          {
 152   1      Cmd(0x40|(y&0x07)); // Y axis
 153   1      Cmd(0x80|(x&0x7f)); // X axis
C51 COMPILER V9.60.7.0   MAIN_FILE                                                         01/16/2023 01:18:54 PAGE 4   

 154   1      }
 155          /* Clears the screen */
 156          
 157          void allClear(void)
 158          {
 159   1      int pixel;
 160   1      setPixel(0,0);                    // Cursor Home.
 161   1      for (pixel=504;pixel>0;pixel--) {Data(0x00);}   // 6*84 = 504 DDRAM addresses.
 162   1      }
 163          /* Nokia3310 LCD Initialization */
 164          
 165          void Initialize_LCD(void)
 166          {
 167   1      RST = 1;  // Set _RES HIGH.
 168   1      CE = 1;   // Disable Chip.
 169   1      Cmd(0x21);    // Activate Chip and H=1.
 170   1      Cmd(0xb2);    // Set LCD Voltage to about 7V.
 171   1      Cmd(0x13);    // Adjust voltage bias.
 172   1      Cmd(0x20);    // Horizontal addressing and H=0.
 173   1      Cmd(0x09);    // Activate all segments.
 174   1      allClear();     // Erase all pixel on the DDRAM.
 175   1      Cmd(0x08);    // Blank the Display.
 176   1      Cmd(0x0C);    // Display Normal.
 177   1      setPixel(0,0);    // Cursor Home.
 178   1      }
 179          /* Bring cursor to Line and character specified                     */
 180          /* Input Arguments: row    -> Line number range from 1 to 6         */
 181          /* Input Arguments: Column -> character position range from 1 to 14 */
 182          /* You can have maximum of 6 lines of text on LCD and each line
 183          containing 14 characters. Address is auto increment              */
 184          
 185          void setCursor(unsigned char row, unsigned char col){
 186   1      if((row>6) || (row<1) || (col<1) || (col>14))
 187   1      return;
 188   1      setPixel(((col-1)*6),(row-1));
 189   1      }
 190          /* Writes single character on LCD                   */
 191          /* Input Arguments: ch -> Character to be displayed */
 192          
 193          void charDisp(unsigned char a){
 194   1      unsigned char i, b;
 195   1      if ( (a < 0x20) || (a > 0x7c) ){
 196   2      a = 92;
 197   2      }
 198   1      for(i=0;i<5;i++){
 199   2      b = LookUpTable[a - 32][i] << 1;
 200   2      Data(b);
 201   2      }
 202   1      Data(0x00);
 203   1      }
 204          /* Writes character string on LCD                            */
 205          /* Input Arguments: str -> Pointer to string to be displayed */
 206          
 207          void stringDisp(unsigned char *p){
 208   1      while(*p)
 209   1      charDisp(*p++);
 210   1      }
 211          void Delay(int k)
 212          {
 213   1      int i,j;
 214   1      for(i=0;i<k;i++)
 215   1      for(j=0;j<1000;j++);
C51 COMPILER V9.60.7.0   MAIN_FILE                                                         01/16/2023 01:18:54 PAGE 5   

 216   1      }
 217          
 218          
 219          void main(){
 220   1      int i;
 221   1      Initialize_LCD();
 222   1      //Bring Cursor to Line 1, character 1
 223   1      setCursor(3,2);
 224   1      //Print string to LCD
 225   1      stringDisp("Group No. 09");
 226   1      Delay(1000);
 227   1      setCursor(3,2);
 228   1      stringDisp("ETC 3rd Year");
 229   1      Delay(1000);
 230   1      //Bring pointer to 0,0 pixel position
 231   1      setPixel(0,0);
 232   1      //Write gfx data on LCD
 233   1      for(i=0;i<504;i++)
 234   1      Data(Graphics[i]);
 235   1      while(1);
 236   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    398    ----
   CONSTANT SIZE    =    990    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
